#############################################################
#                                                           #
# This file is an essential part of collector's execution!  #
# And is responsible to get the functions:                  #
#   * nmap_ips                                              #
#   * shodan_scan                                           #
#                                                           #
############################################################# 

nmap_ips(){
    if [ -d "${report_dir}" ]; then
        if [ -s "${report_dir}/domains_ips.txt" ]; then
            echo -ne "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} Getting subdomains IP to use with nmap... "
            awk '{print $2}' "${report_dir}/domains_ips.txt" | sort -u >> "${report_dir}/nmap_ips.txt"
            echo "Done!"
        else
            echo -e "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} nmap_ips function error: file ${report_dir}/domains_ips.txt does not exist or is empty!"
            exit 1
        fi

        echo -ne "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} Getting target ip blocks to use with nmap... "
        while IFS= read -r ip; do
            whois "${ip}" 2> /dev/null | grep -E "^inetnum:|^inetrev:|^CIDR:|^inetnum-up:" | \
                awk '{for (i=2; i<=NF; i++){printf("%s",$i)}; printf "\n"}'
            sleep 5
        done < "${report_dir}/nmap_ips.txt" | sort -u >> "${tmp_dir}/tmp_blocks.txt"
        unset block
        unset ip

        while IFS= read -r subdomain; do
            if whois "${subdomain}" 2> /dev/null | grep -q "${domain}"; then
                sleep 5
                whois "${subdomain}" 2> /dev/null | grep -E "^inetnum:|^inetrev:|^CIDR:|^inetnum-up:" | \
                    awk '{for (i=2; i<=NF; i++){printf("%s",$i)}; printf "\n"}'
                sleep 5
            fi
        done < "${report_dir}/domains_alive.txt" | sort -u >> "${tmp_dir}/tmp_blocks.txt"
        unset subdomain

        while IFS= read -r block; do
            for asn in $(whois "${block}" 2> /dev/null | grep -E "^aut-num:" | awk '{print $2}'); do
                sleep 5
                [[ -n "${asn}" ]] && \
                    curl -A "${curl_agent}" -s https://api.hackertarget.com/aslookup/?q="${asn}" 2> /dev/null | \
                    grep -E "^^([0-9]+(\.|$)){4}|^([0-9a-fA-F]{0,4}:){1,7}([0-9a-fA-F]){0,4}$"
                sleep 5
            done
        done < "${tmp_dir}/tmp_blocks.txt" | sort -u >> "${tmp_dir}/tmp_asn_blocks.txt"
        unset asn

        [[ -s "${tmp_dir}/tmp_asn_blocks.txt" ]] && \
            sort -u "${tmp_dir}/tmp_asn_blocks.txt" >> "${tmp_dir}/tmp_blocks.txt"

        [[ -s "${tmp_dir}/tmp_blocks.txt" ]] && \
            sed -i 's/,/\n/g' "${tmp_dir}/tmp_blocks.txt"; \
                sort -u "${tmp_dir}/tmp_blocks.txt" | sed 's/,/\n/g' >> "${report_dir}/recon_blocks.txt"

        ownerid=$(whois "${domain}" 2> /dev/null | grep -E "^ownerid:" | awk '{print $2}')
        if [[ -n "${ownerid}" ]] && [[ -s "${report_dir}/recon_blocks.txt" ]]; then
            while IFS= read -r block; do
                if whois "${block}" 2> /dev/null | grep -q "${ownerid}"; then
                    sleep 5
                    echo "${block}"
                fi
            done < "${report_dir}/recon_blocks.txt" | sort -u >> "${tmp_dir}/tmp_owner_blocks.txt"
            unset block
        fi
        unset ownerid

        [[ -s "${tmp_dir}/tmp_owner_blocks.txt" ]] && \
            sort -u "${tmp_dir}/tmp_owner_blocks.txt" > "${report_dir}/owner_blocks.txt"

        echo "Done!"

        if [ -s "${report_dir}/owner_blocks.txt" ]; then
            echo -e "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} Getting IPs from blocks with nmap -sn \"block\"..."
            count=0
            while IFS= read -r block; do
                block_file=nmap_$(echo "${block}" | sed -e 's/\//_/').txt
                cidr=$(echo "${block}" | awk -F'/' '{print $2}')
                if [[ ${cidr} -ge 24 ]]; then
                    nmap -sn "${block}" --exclude 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 --max-retries 3 --host-timeout 3 2> /dev/null \
                        | grep -E "Nmap.*for" | awk '{print $6}' | sed -e 's/(//' -e 's/)//' > "${report_dir}"/"${block_file}"
                    sed -i '/^$/d' "${report_dir}/${block_file}"
                    (( count+=1 ))
                else
                    continue
                fi
                unset block_file
                unset cidr
            done < "${report_dir}/owner_blocks.txt"
            echo -e "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} Got IP blocks, done!"
            if [[ ${count} -lt $(wc -l "${report_dir}/owner_blocks.txt" | awk '{print $1}') ]]; then
                echo -e "${red}Warning:${reset} Just ${count} block(s) were scanned, please look at ${report_dir}/owner_blocks.txt"
                echo -e "\t and nmap blocks files to know what were excluded blocks."
            fi
            unset count
        fi
    else
        echo -e "${yellow}$(date +%H:%M)${reset} ${red}>>${reset} Make sure the directories structure was created. Stopping the script."
        exit 1
    fi
}

shodan_scan(){
    if [ "${shodan_use}" == "yes" ] && [ -s "${report_dir}/owner_blocks.txt" ]; then
        for block in $(cat "${report_dir}/owner_blocks.txt"); do
            network=$(echo ${block} | awk -F'/' '{print $1}')
            cidr=$(echo ${block} | awk -F'/' '{print $2}')
            rm_network=$(echo ${network} | awk -F'.' '{print $1"."$2"."$3"."}')
            ip_range=$(curl -A "${curl_agent}" -s "http://jodies.de/ipcalc" -d "host=${network}&mask1=${cidr}" 2> /dev/null | sed 's/<font color="#000000">/\\\n/g ; s/\\//g' | grep -E "HostMin:|HostMax:" | awk '{print $3}' | sed 's/.*>//' | tr '\n' ' ' | sed "s/${rm_network}//g ; s/.$//")
            total_ip=$(curl -A "${curl_agent}" -s "http://jodies.de/ipcalc" -d "host=${network}&mask1=${cidr}" 2> /dev/null | sed 's/<font color="#000000">/\\\n/g ; s/\\//g' | grep -E "Hosts/Net:" | awk '{print $3}' | sed 's/.*>//' | tr '\n' ' ')
            shodan_scans=$(${shodan_bin} info | grep "Scan.*:" | awk '{print $4}')
            shodan_count=0
            if [ "${shodan_scans}" -gt "${total_ip}" ]; then
                for ip in $(seq ${ip_range}); do
                    [[ "${shodan_count}" -eq "${shodan_scan_total}" ]] && break
                    "${shodan_bin}" scan submit "${rm_network}${ip}" > "${shodan_dir}/shodan_${rm_network}${ip}" 2>&1 &
                    (( shodan_count+=1 ))
                done
            fi
        done
    fi

    shodan_scans=$(${shodan_bin} info | grep "Scan.*:" | awk '{print $4}')
    if [ "${shodan_use}" == "yes" ] && [ "${shodan_scan_main_domain}" == "yes" ] && [ "${shodan_scans}" -gt 1 ]; then
        main_domain_ip=$(timeout 5s host -W 3 -t A ${domain} 2> /dev/null | awk '{print $4}' | head -n1)
        [[ -n "${main_domain_ip}" ]] && \
            "${shodan_bin}" scan submit "${main_domain_ip}" > "${shodan_dir}/shodan_${domain}" 2>&1 &
    fi
}
