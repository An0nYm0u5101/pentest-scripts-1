#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys
import re
import subprocess

class Docker:

    def process(self, process_name):
        if subprocess.run(["pgrep", "-af", process_name], stdout=subprocess.PIPE).returncode == 0:
            return True
        else:
            return False

    def start(self):
        if self.process('dockerd') == True:
            docker_cmd_image = "docker images | grep -E '^[p]rivoxy' | awk '{print $1}'" 
            image = subprocess.check_output(docker_cmd_image, shell=True).decode().rstrip()
            if image and image == "privoxy":
                docker_cmd_check = "docker ps -a | grep seek-leak | awk '{print $1}'"
                docker_id = subprocess.check_output(docker_cmd_check, shell=True).decode().rstrip()
                if not docker_id:
                    print("Starting privoxy docker instance to get a proxy... ", end='')
                    docker_cmd_port = "docker ps -a | grep -E '[p]rivoxy.*0.0.0.0' | awk '{print $13}' | sed -e 's/-.*//' | awk -F':' '{print $2}'"
                    docker_port = subprocess.check_output(docker_cmd_port, shell=True).decode().rstrip()[:12]
                    docker_name = "seek-leak"

                    if docker_port:
                        docker_cmd_start = "docker run -d --rm --name "+docker_name+" -p 8119:8119 privoxy"
                    else:
                        docker_cmd_start = "docker run -d --rm --name "+docker_name+" -p 8118:8118 privoxy"

                    docker_id = subprocess.check_output(docker_cmd_start, shell=True).decode().rstrip()[:12]
                    print("Finished!")
                    return True
                else:
                    return False
            else:
                print("Does not exist privoxy image!")
                print("Please run: docker build -t privoxy ~/pentest/pentest-scripts/infra/tor/tor-docker/")
                sys.exit(1)
        else:
            print("Docker does not exist or not running!")
            sys.exit(1)

    def get_id(self):
        docker_cmd_check = "docker ps -a | grep seek-leak | awk '{print $1}'"
        docker_id = subprocess.check_output(docker_cmd_check, shell=True).decode().rstrip()
        if docker_id:
            return docker_id

    def get_ip(self):
        docker_id = self.get_id()
        docker_cmd_ip = "docker inspect -f '{{ .NetworkSettings.IPAddress }}' "+ docker_id
        self.docker_ip = subprocess.check_output(docker_cmd_ip, shell=True).decode().rstrip()
        validation = "^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
        if re.match(validation, self.docker_ip):
            return self.docker_ip
        else:
            print("Does not possible to determine the instance IP!")
            #sys.exit(1)

    def stop(self):
        docker_id = self.get_id()
        if docker_id:
            if subprocess.run(["docker", "stop", docker_id], stdout=subprocess.PIPE).returncode == 0:
                print("Seek Leak privoxy docker instance was stopped!")
                sys.exit(1)
            else:
                print("Does not possible stop Seek Leak privoxy docker instance!")
                sys.exit(1)
