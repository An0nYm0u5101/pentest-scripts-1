#!/usr/bin/python3
# -*- coding: utf-8 -*-
import argparse
import os
import re
import socket
import sys
from argparse import RawTextHelpFormatter
from pathlib import Path

class Arguments:

    def parser(self):
        parser = argparse.ArgumentParser()
        proxies = parser.add_mutually_exclusive_group()
        search = parser.add_mutually_exclusive_group(required=True)
        search.add_argument("-ab","--allbreaches",
                           action="store_true",
                           help="lists all leaks so far")
        parser.add_argument("-bp","--beenpwned",
                           action="store_true",
                           help="check if an email or a domain has a leak if it has will seek")
        proxies.add_argument("-c","--container",
                            action="store_true",
                            help="if specified will verify if docker is running and have a tor instance and start it to seek for leaks on tor")
        search.add_argument("-d","--domain",
                            type=str,
                            help="specify the domain wanted to seek for leak [needed]")
        search.add_argument("-e","--email",
                            type=str,
                            help="email to seek for leak")
        parser.add_argument("-f","--force",
                           action="store_true",
                           help="will force to search for leak when used with -bp/--beenpwned, you need to specify what you want -c, -p or -l")
        search.add_argument("-i", "--input",
                            type=argparse.FileType(mode='r'),
                            help="file with domains, emails or passwords to seek for leaks")
        parser.add_argument("-l","--location",
                            type=str,
                            help="specify the directory with leak(s) [needed] you need to specify a valid directory and with the necessary permissions")
        parser.add_argument("-o","--output",
                            type=argparse.FileType(mode='a+'),
                            help="specify a file to storage the result from seek")
        proxies.add_argument("-p", "--proxy",
                            type=str,
                            help="Tor proxy URL to use if specified you need to inform the ip address of tor proxy to seek for leaks on tor")
        search.add_argument("-s","--secret",
                            type=str,
                            help="if specified you need to inform the password or hash to seek for leak")

        args = parser.parse_args()
        if args.allbreaches and not args.beenpwned:
            parser.error('The \"--allbreaches\" just will work if you indicate the \"--beenpwned\" and will ignore all other option except \"--output\" option.')
        elif not (args.beenpwned or args.container or args.location or args.proxy):
            parser.error('No action requested, one of the arguments -bp/--beenpwned, -l/location or one of proxy group -c/--container or -p/--proxy are required!')
        elif args.force and not args.beenpwned:
            parser.error("You couldn't use -f/--force with any option but -bp/--beenpwned")
        elif args.force and not (args.container or args.location or args.proxy):
            parser.error("You need specify one option to seek for leak.")
        else:
            return args

    def check_domain(self, domain):
        try:
            print("Validating domain name... ", end='')
            if socket.gethostbyname(domain.lower()):
                print("Finished!")
                return True
        except socket.gaierror:
            print("\nUnable to get address for "+domain.lower()+"!")
            print("Please provide a valid one.")
            #sys.exit(2)

    def check_email(self, email):
        #regex = '^[\w\.\+\-\_]+\@[\w]+\.[a-z]{3,4}$'
        regex = '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        #regex = '^[a-z]([w-]*[a-z]|[w-.]*[a-z]{2,}|[a-z])*@[a-z]([w-]*[a-z]|[w-.]*[a-z]{2,}|[a-z]){4,}?.[a-z]{2,}$'
        if re.search(regex, email.lower()):
            if self.check_domain(email.split('@')[1].lower()) == True:
                print("Validating email address... ", end='')
                email = email.split('@')[0].lower() + "@" + email.split('@')[1].lower()
                print("Finished!")
                return True
            else:
                print("\nThis email "+email.lower()+" does not appear to be valid.")
                print("Please enter a valid email address!")
                return False
                #sys.exit(2)
        else:
            print("Does not possible determine if email is a valid one.")

    def check_location(self, location):
        print("Validating access permition on "+location+"... ",end='')
        if os.access(location, os.W_OK):
            print("Finished!")
            return location
        else:
            print("\nYou trying to seek for leaks on "+location+" a directory you haven't access!")
            print("Please, provide a directory that you have read access.")
            #sys.exit(2)
