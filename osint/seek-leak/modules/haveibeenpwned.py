#! /usr/bin/python3
# -*- coding: utf-8 -*-
import hashlib
import os
import requests
import re
import sys
import time
import json

class HaveIBeenPwned:

    def check_config(self, config_file):
        if os.path.isfile(config_file) == False:
            print("Please provide a config file with API key for haveibeenpwned!")
            sys.exit(2)
        elif os.path.isfile(config_file) == True:
            configs = open(config_file, 'r')
            hibp_api_key = ''
            for config in configs.readlines():
                if re.search(r'^hibp-api-key.*=', config.strip()):
                    try:
                        hibp_api_key = config.strip().split(' = ')[1]
                    except IndexError:
                        continue
                if re.search(r'^hibp-all-breaches.*=', config.strip()):
                    try:
                        if config.strip().split(' = ')[1] != "True" and config.strip().split(' = ')[1] != "False":
                            print("You trying use diferent option to hipb-all-breaches when we only accept \"True\" or \"False\".")
                            sys.exit(1)
                        else:
                            self.hibp_all_breaches = config.strip().split(' = ')[1]
                    except IndexError:
                        continue

            if not hibp_api_key:
                print("Please provide a API key to use -bp/--beenpwned")
                sys.exit(2)
            else:
                self.headers(hibp_api_key)

    def headers(self, hibp_api_key):
        self.headers = {
            'User-Agent' : 'seek-leak',
            'hibp-api-key' : hibp_api_key 
        }

    def http_code(self, http_code, search=None):
        error_code = {
                400: "\nHTTP Error 400. %s does not appear to be a valid." % (search),
                401: "\nHTTP Error 401. Unauthorised - the API key provided was not valid.",
                403: "\nHTTP Error 403. Forbidden - no user agent has been specified in the request.",
                429: "\nHTTP Error 429. Too many requests; the rate limit has been exceeded.",
                503: "\nHTTP Error 503. Service unavailable."
        }

        if http_code != 200:
            try:
                print(error_code[http_code])
                if http_code == 401:
                    sys.exit(1)
            except KeyError:
                pass

    def breached_domain(self, domain, output_file):
        print("Validating if the DOMAIN has a leak information at Have I Been Pwned... ", end='')
        breached_domain = requests.get('https://haveibeenpwned.com/api/v3/breaches?domain='+domain, headers=self.headers)
        self.http_code(breached_domain.status_code, domain)
        time.sleep(1.6)
        if len(breached_domain.json()) > 0:
            print("We have leak!")
            if output_file is not None and os.path.isfile(output_file):
                f = open(output_file, "a+")
                f.write("The leaks were: \n")
                i = 0
                for i in range(i, len(breached_domain.json())):
                    f.write("    > "+breached_domain.json()[i]['Name']+"\n")
                f.close()
                print("You can access the results in "+output_file+".")
            else:
                print("The leaks were: ")
                i = 0
                for i in range(i, len(breached_domain.json())):
                    print("    > "+breached_domain.json()[i]['Name'])
        else:
            print("We haven't leak!")

    def breached_account(self, email, output_file):
        print("Validating if the email has a DATA BASE leak information at Have I Been Pwned... ", end='')
        pwned = requests.get('https://haveibeenpwned.com/api/v3/breachedaccount/'+email, headers=self.headers)
        self.http_code(pwned.status_code, email)
        time.sleep(1.6)
        try:
            if len(pwned.json()) > 0:
                print("We have leak!")
                if output_file is not None and os.path.isfile(output_file):
                    f = open(output_file, "a+")
                    f.write("Data Base Leaks for "+email+"!!!\n")
                    f.write("The leaks were: \n")
                    i = 0
                    for i in range(i, len(pwned.json())):
                        f.write("    > "+str(pwned.json()[i]['Name'])+"\n")
                    f.close()
                    print("You can access the results in "+output_file+".")
                else:
                    print("The leaks were: ")
                    i = 0
                    for i in range(i, len(pwned.json())):
                        print("    > "+pwned.json()[i]['Name'])
            else:
                print("We haven't leak!")
        except:
            print("We haven't leak!")

    def breached_pastebin(self, email, output_file):
        print("Validating if the email has a PASTEBIN leak information at Have I Been Pwned... ", end='')
        pasted = requests.get('https://haveibeenpwned.com/api/v3/pasteaccount/'+email, headers=self.headers)
        self.http_code(pasted.status_code, email)
        time.sleep(1.6)
        if pasted.text:
            try:
                print("We have leak!")
                if output_file is not None and os.path.isfile(output_file):
                    f = open(output_file, "a+")
                    f.write("Pastebin Leaks for "+email+"!!!\n")
                    f.write("The leaks were: \n")
                    i = 0
                    for i in range(i, len(pasted.json())):
                        f.write("    > ID: "+str(pasted.json()[i]['Id'])+"\n")
                        f.write("      Title: "+str(pasted.json()[i]['Title'])+"\n")
                    f.close()
                    print("You can access the results in "+output_file+".")
                else:
                    print("The leaks were: ")
                    i = 0
                    for i in range(i, len(pasted.json())):
                        print("    > ID: "+pasted.json()[i]['Id']+"\n      Title: "+pasted.json()[i]['Title'])
            except TypeError:
                pass
        else:
            print("We haven't leak!")

    def breached_pass(self, secret, output_file):
        print("Validating if the PASSWORD has a leak information at Have I Been Pwned... ", end='')
        get_hash = hashlib.sha1(secret.encode()).hexdigest()
        secret_hash = requests.get('https://api.pwnedpasswords.com/range/'+get_hash[:5], headers=self.headers)
        self.http_code(secret_hash.status_code, secret)
        time.sleep(1.6)
        if secret_hash.text:
            try:
                print("We have leak!")
                regex = r''+get_hash[5:].upper()+':.*$'
                for pass_hash in secret_hash.text.splitlines():
                    leak_pass = re.findall(regex, pass_hash)
                    if leak_pass:
                        if output_file is not None and os.path.isfile(output_file):
                            f = open(output_file, "a+")
                            if leak_pass[0].split(':')[0] == get_hash[5:].upper():
                                f.write("Leak for "+secret+": \n")
                                f.write("    Password SHA-1 Hash > "+str(get_hash)+"\n")
                                f.write("    Number of times it appeared > "+str(leak_pass[0].split(':')[1])+"\n")
                                f.close()
                                print("You can access the results in "+output_file+".")
                            else:
                                print("But not for the specified hash.")
                        else:
                            if leak_pass[0].split(':')[0] == get_hash[5:].upper():
                                print("Leak:")
                                print("    Password SHA-1 Hash >", get_hash)
                                print("    Number of times it appeared >", leak_pass[0].split(':')[1])
                            else:
                                print("But not for the specified hash.")
            except TypeError:
                pass
        else:
            print("We haven't leak!")

    def breached_total(self, output_file):
        print("Ignoring all options (except -o ouput) you input to print all breaches found!")
        total = requests.get('https://haveibeenpwned.com/api/v3/breaches', headers=self.headers)
        self.http_code(total.status_code)
        time.sleep(1.6)
        total = total.json()
        if output_file is not None and os.path.isfile(output_file):
            f = open(output_file, "a+")
            f.write("All database breaches in Have I Been Pwned!!!")
            f.write("Total breaches: "+str(len(total))+"\n")
            f.write("And they are:\n")
            f.write("+---------------------------------------------------------------------------------+\n")
            f.write("|             Name                |           Domain            |   Breach Date   |\n")
            f.write("+---------------------------------------------------------------------------------+\n")
            i = 0
            for i in range(i, len(total)):
                f.write("| {:<31} | {:<27} |   {:<13} |\n".format(total[i]['Name'], total[i]['Domain'], total[i]['BreachDate']))
            f.write("+---------------------------------------------------------------------------------+\n")
            f.close()
            print("You can access the results in "+output_file+".")
        else:
            print("Total breaches:", len(total))
            print("And they are:",end='')
            print("""
+---------------------------------------------------------------------------------+
|             Name                |           Domain            |   Breach Date   |  
+---------------------------------------------------------------------------------+
""", end='')
            i = 0
            for i in range(i, len(total)):
                print("| {:<31} | {:<27} |   {:<13} |".format(total[i]['Name'], total[i]['Domain'], total[i]['BreachDate']))
            print("+---------------------------------------------------------------------------------+")
        sys.exit(0)
