#!/bin/bash

red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

if [ ${EUID} -ne 0 ]; then
    echo -e "Please, execute this script with ${red}root${reset} or ${red}sudo${reset}..."
    echo "Because we need to edit /etc/hosts file!"
    exit 1
fi

if [ -z $(command -v html2text) ]; then 
    echo -e "Please, install html2text with:"
    echo "    pip install html2text"
    exit 1
fi

if [[ "$#" -gt 2 ]] || [[ "$#" -lt 2 ]]; then
    echo "You need to pass only two arguments, network/cidr and domain!"
    exit
fi

code_check=200
IPv4_regex='^((25[0-5]|2[0-4][0-9]|[01][0-9][0-9]|[0-9]{1,2})[.]){3}(25[0-5]|2[0-4][0-9]|[01][0-9][0-9]|[0-9]{1,2})$'

if [[ ! $(echo "$1" | awk -F'/' '{print $1}') =~ ${IPv4_regex} ]]; then
    domain="$1"
    network="$(echo $2 | awk -F'/' '{print $1}')"
    cidr="$(echo $2 | awk -F'/' '{print $2}')"
else
    domain="$2"
    network="$(echo $1 | awk -F'/' '{print $1}')"
    cidr="$(echo $1 | awk -F'/' '{print $2}')"
fi

if [[ -n "${domain}" ]]; then
    if [[ -z $(dig "${domain}" +short +time=5 +tries=3 @1.1.1.1 2>/dev/null) ]]; then
        echo "Please provide a valid domain."
        exit 1
    fi
else
    echo "Please provide a domain."
    exit
fi

if [ -z "${network}" ] || [ -z "${cidr}" ]; then
    echo "You need to inform the network designation."
    exit 1
fi

if [[ ! ${network} =~ ${IPv4_regex} ]]; then
    echo "Please, the argument must be a valid IP address."
    exit 1
fi

if [ ${cidr} -gt 32 ] || [ ${cidr} -le 0 ] ; then
    echo "Please, the cidr must be a number between 1 and 32."
    exit 1
fi

ips_file=./$(echo "${domain}" | sed -e 's/\./_/')_ips.txt
[[ -s "${ips_file}" ]] && > "${ips_file}"

echo "${network} ${domain}" >> /etc/hosts
domain_line="$(wc -l /etc/hosts | awk '{print $1}')"
ip_deleted=()

echo -n "Getting IP list... "

network_result="$(curl -s "http://jodies.de/ipcalc?host=${network}&mask1=${cidr}" | \
    html2text | sed "s/^[[:blank:]]*//g" | \
    grep -E "^Address|^Netmask|^Wildcard|^=>|^Network|^Broadcast|^HostMin|^HostMax|^Hosts/Net"
)"

if [ ${cidr} -eq 32 ]; then
    host_min=$(echo "${network_result}" | grep -E "^HostMin:" | awk '{print $2}')
    host_max=$(echo "${network_result}" | grep -E "^HostMax:" | awk '{print $2}')
    if [ "${host_min}" == "${host_max}" ]; then
        echo "${host_max}" >> "${ips_file}"
    fi
elif [ ${cidr} -eq 24 ]; then
    network_octets=$(echo "${network_result}" | grep -E "^Network:" | awk '{print $2}' | cut --output-delimiter='.' -d'.' -f 1-3)
    host_count=$(echo "${network_result}" | grep -E "^HostMin:" | awk -F'.' '{print $4}' | cut -d' ' -f1)
    host_final=$(echo "${network_result}" | grep -E "^HostMax:" | awk '{print $2}')
    while [[ "${ip}" != "${host_final}" ]] ; do
        ip="${network_octets}.${host_count}"
        (( host_count += 1 ))
        echo "${ip}" >> "${ips_file}"
    done
else
    network_initial=$(echo "${network_result}" | grep -E "^HostMin:" | awk -F'.' '{print $3}')
    network_final=$(echo "${network_result}" | grep -E "^HostMax:" | awk -F'.' '{print $3}')
    network_octets=$(echo "${network_result}" | grep -E "^Network:" | awk '{print $2}' | cut --output-delimiter='.' -d'.' -f 1-2)
    network_count=${network_initial}
    host_count=$(echo "${network_result}" | grep -E "^HostMin:" | awk -F'.' '{print $4}' | cut -d' ' -f1)
    host_final=$(echo "${network_result}" | grep -E "^HostMax:" | awk '{print $2}')
    while [[ "${ip}" != "${host_final}" ]] ; do
        ip="${network_octets}.${network_count}.${host_count}"
        (( host_count += 1 ))
        if [ ${host_count} -gt 255 ]; then
            host_count=0
            [[ ${network_count} -lt ${network_final} ]] && (( network_count += 1 ))
        fi
        echo "${ip}" >> "${ips_file}"
    done
fi

if [ ${#ip_deleted[@]} -gt 0 ]; then
    for ip in ${ip_deleted[@]}; do
        sed -i "/${ip}/d" "${ips_file}"
    done
fi

echo "Done!"
echo -n "Searching the direct IP for ${domain}... "

for ip in $(cat "${ips_file}"); do
    sed -i "${domain_line}s/.*${domain}/${ip} ${domain}/" /etc/hosts
    code=$(curl -o /dev/null -s -w "%{http_code}\n" --connect-timeout 5 "https://${domain}")
    if [[ ${code} -eq ${code_check} ]]; then
        echo "Done!"
        echo -e "${domain}\t${ip}"
        exit 1
    fi
done
echo "Fail!"
